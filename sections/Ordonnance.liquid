{{ 'component-image-with-text.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- liquid
  if section.settings.image_layout contains 'right'
    assign odd_class = ' image-with-text__grid--reverse'
  else
    assign even_class = ' image-with-text__grid--reverse'
  endif

  if section.settings.row_color_scheme == section.settings.section_color_scheme
    assign no_content_background = true
  endif

  if settings.text_boxes_shadow_opacity == 0 and settings.text_boxes_border_thickness == 0 or settings.text_boxes_border_opacity == 0
    assign no_content_styles = true
  endif

  if settings.text_boxes_border_thickness > 0 and settings.text_boxes_border_opacity > 0 and settings.media_border_thickness > 0 and settings.media_border_opacity > 0
    assign borders_class = ' collapse-borders'
  endif

  if no_content_background and no_content_styles
    assign padding_class = ' collapse-padding'
  endif

  unless no_content_background and no_content_styles
    assign corners_class = ' collapse-corners'
  endunless
-%}

<div class="ordonnance section-{{ section.id }}-padding gradient color-{{ section.settings.section_color_scheme }}">
  <div class="ordonnance__inner page-width">


{% for product in metaobjects.phase1.values %}
  title: {{ product.title.value }}
{% endfor %}

{% for entry in metaobjects.phase1.values %}
  <h2>Title: {{ entry.title.value }}</h2>
  <img src="{{ entry.product.featured_image | image_url: width: 300 }}" alt="{{ entry.product.title }}">
  <p>Description: {{ entry.product.description }}</p>
{% endfor %}

    
    
    {%- for block in section.blocks -%}
   {%- liquid
  assign product = block.settings.product
-%}   
      <div
        class="image-with-text isolate{{ borders_class }}{{ corners_class }}{{ padding_class }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
        {{ block.shopify_attributes }}
      >
        <div class="image-with-text__grid grid grid--gapless grid--1-col grid--{% if section.settings.desktop_image_width == 'medium' %}2-col-tablet{% else %}3-col-tablet{% endif %}{% if section.settings.image_layout contains 'alternate' %}{% cycle odd_class, even_class %}{% else %}{{ odd_class }}{% endif %}">
          <div class="image-with-text__media-item image-with-text__media-item--{{ section.settings.desktop_image_width }} image-with-text__media-item--{{ section.settings.desktop_content_position }} grid__item">
            <div
              class="image-with-text__media image-with-text__media--{{ section.settings.image_height }} gradient color-{{ section.settings.row_color_scheme }} global-media-settings{% if product.featured_image != blank %} media{% else %} image-with-text__media--placeholder placeholder{% endif %}"
              {% if section.settings.image_height == 'adapt' %}
                style="padding-bottom: {{ 1 | divided_by: block.settings.image.aspect_ratio | times: 100 }}%;"
              {% endif %}
            >
              {%- if product.featured_image != blank -%}
                {%- capture sizes -%}
                  (min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 | divided_by: 2 }}px,
                  (min-width: 750px) calc((100vw - 130px) / 2), calc((100vw - 50px) / 2)
                {%- endcapture -%}
                {{
                  product.featured_image
                  | image_url: width: 1500
                  | image_tag: sizes: sizes, widths: '165, 360, 535, 750, 1070, 1500'
                }}
              {%- else -%}
                {{ 'detailed-apparel-1' | placeholder_svg_tag: 'placeholder-svg' }}
              {%- endif -%}

              
            </div>
          </div>
          <div class="image-with-text__text-item grid__item">
            <div class="image-with-text__content image-with-text__content--{{ section.settings.desktop_content_position }} image-with-text__content--desktop-{{ section.settings.desktop_content_alignment }} image-with-text__content--mobile-{{ section.settings.mobile_content_alignment }} image-with-text__content--{{ section.settings.image_height }} content-container{% unless no_content_background and no_content_styles %} gradient color-{{ section.settings.row_color_scheme }}{% else %} background-transparent{% endunless %}">
              <h2 class="product__title {{ block.settings.heading_size }}" {{ block.shopify_attributes }}>
                  
                      {{ product.title | escape }}
                    
                  </h2>
          
                <div class="image-with-text__text rte {{ section.settings.text_style }}">{{ product.description }}</div>
              <div>{{ product.price }}</div>
              <div>
                <button type="button" data-variant-id="{{ product.variants.first.id }}" class="add-button">Add</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    {%- endfor -%}
  </div>
  <div class="multi--right-block">
     <div class="selected__products">
     </div>
<button
            type="submit"
            name="add"
            class="dev__product-form__submit button button--full-width button--primary"
          
          >
    Add to cart
          </button>
   <div>
     
   </div>
  </div>
</div>






<script>
  document.addEventListener("DOMContentLoaded", function () {
    let selectedProductsContainer = document.querySelector(".selected__products");
    let addToCartButton = document.querySelector(".dev__product-form__submit");

    // Load saved products from localStorage
    let selectedProducts = JSON.parse(localStorage.getItem("selectedProducts")) || [];

    // Function to render selected products
    function renderSelectedProducts() {
      selectedProductsContainer.innerHTML = ""; // Clear existing items
      selectedProducts.forEach(product => {
        let productElement = document.createElement("div");
        productElement.classList.add("selected-product");
        productElement.innerHTML = `
          <div class="selected-product__image">
            <img src="${product.image}" alt="${product.title}" width="50">
          </div>
          <div class="selected-product__info">
            <p>${product.title}</p>
            <p>${product.price}</p>
            <button class="remove-button" data-variant-id="${product.variantId}">Remove</button>
          </div>
        `;
        
        // Remove product from localStorage on click
        productElement.querySelector(".remove-button").addEventListener("click", function () {
          selectedProducts = selectedProducts.filter(p => p.variantId !== product.variantId);
          localStorage.setItem("selectedProducts", JSON.stringify(selectedProducts));
          renderSelectedProducts(); // Re-render UI
        });

        selectedProductsContainer.appendChild(productElement);
      });
    }

    // Initial render from localStorage
    renderSelectedProducts();

    // Handle "Add" button click
    document.querySelectorAll(".add-button").forEach(button => {
      button.addEventListener("click", function () {
        let variantId = this.dataset.variantId; // Get the variant ID
        let productTitle = this.closest(".image-with-text__content").querySelector(".product__title").textContent;
        let productPrice = this.closest(".image-with-text__content").querySelector("div:nth-of-type(2)").textContent;
        let productImage = this.closest(".image-with-text").querySelector("img")?.src || '';

        // Prevent duplicates
        if (selectedProducts.some(p => p.variantId === variantId)) return;

        // Add to localStorage
        let productData = { variantId: variantId, title: productTitle, price: productPrice, image: productImage };
        selectedProducts.push(productData);
        localStorage.setItem("selectedProducts", JSON.stringify(selectedProducts));

        renderSelectedProducts(); // Re-render UI
      });
    });

    // Handle "Add to Cart" button click
    addToCartButton.addEventListener("click", function () {
      if (selectedProducts.length === 0) {
        alert("No products selected!");
        return;
      }

      // Debug: Log selected products before sending
      console.log("Selected Products:", selectedProducts);

      // Prepare data in correct Shopify format
      let cartData = { 
        items: selectedProducts.map(product => ({
          id: Number(product.variantId), // Convert to number
          quantity: 1
        }))
      };

      // Debug: Log cartData before sending
      console.log("Sending to Shopify /cart/add.js:", JSON.stringify(cartData));

      // Send the request to Shopify's cart API
      fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(cartData)
      })
        .then(response => response.json().then(data => ({ status: response.status, body: data })))
        .then(({ status, body }) => {
          if (status >= 400) {
            console.error("Shopify Error Response:", body);
            alert("Failed to add products to cart: " + (body.message || "Unknown error"));
            return;
          }

          console.log("Products successfully added to cart:", body);
          localStorage.removeItem("selectedProducts"); // Clear storage
          selectedProducts = []; // Reset array
          renderSelectedProducts(); // Update UI
          window.location.href = "/cart"; // Redirect to cart page
        })
        .catch(error => {
          console.error("Error adding to cart:", error);
          alert("Failed to add products to cart. Please try again.");
        });
    });
  });
</script>







{% schema %}
{
  "name": "t:sections.ordonnance.name",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    
    {
      "type": "select",
      "id": "image_height",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.ordonnance.settings.image_height.options__1.label"
        },
        {
          "value": "small",
          "label": "t:sections.ordonnance.settings.image_height.options__2.label"
        },
        {
          "value": "medium",
          "label": "t:sections.ordonnance.settings.image_height.options__3.label"
        },
        {
          "value": "large",
          "label": "t:sections.ordonnance.settings.image_height.options__4.label"
        }
      ],
      "default": "medium",
      "label": "t:sections.ordonnance.settings.image_height.label"
    },
    {
      "type": "select",
      "id": "desktop_image_width",
      "options": [
        {
          "value": "small",
          "label": "t:sections.ordonnance.settings.desktop_image_width.options__1.label"
        },
        {
          "value": "medium",
          "label": "t:sections.ordonnance.settings.desktop_image_width.options__2.label"
        },
        {
          "value": "large",
          "label": "t:sections.ordonnance.settings.desktop_image_width.options__3.label"
        }
      ],
      "default": "medium",
      "label": "t:sections.ordonnance.settings.desktop_image_width.label",
      "info": "t:sections.ordonnance.settings.desktop_image_width.info"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        },
        {
          "value": "hxl",
          "label": "t:sections.all.heading_size.options__4.label"
        },
        {
          "value": "hxxl",
          "label": "t:sections.all.heading_size.options__5.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "select",
      "id": "text_style",
      "options": [
        {
          "value": "body",
          "label": "t:sections.ordonnance.settings.text_style.options__1.label"
        },
        {
          "value": "subtitle",
          "label": "t:sections.ordonnance.settings.text_style.options__2.label"
        }
      ],
      "default": "body",
      "label": "t:sections.ordonnance.settings.text_style.label"
    },
    {
      "type": "select",
      "id": "button_style",
      "options": [
        {
          "value": "primary",
          "label": "t:sections.ordonnance.settings.button_style.options__1.label"
        },
        {
          "value": "secondary",
          "label": "t:sections.ordonnance.settings.button_style.options__2.label"
        }
      ],
      "default": "secondary",
      "label": "t:sections.ordonnance.settings.button_style.label"
    },
    {
      "type": "select",
      "id": "desktop_content_position",
      "options": [
        {
          "value": "top",
          "label": "t:sections.ordonnance.settings.desktop_content_position.options__1.label"
        },
        {
          "value": "middle",
          "label": "t:sections.ordonnance.settings.desktop_content_position.options__2.label"
        },
        {
          "value": "bottom",
          "label": "t:sections.ordonnance.settings.desktop_content_position.options__3.label"
        }
      ],
      "default": "middle",
      "label": "t:sections.ordonnance.settings.desktop_content_position.label",
      "info": "t:sections.ordonnance.settings.desktop_content_position.info"
    },
    {
      "type": "select",
      "id": "desktop_content_alignment",
      "options": [
        {
          "value": "left",
          "label": "t:sections.ordonnance.settings.desktop_content_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:sections.ordonnance.settings.desktop_content_alignment.options__2.label"
        },
        {
          "value": "right",
          "label": "t:sections.ordonnance.settings.desktop_content_alignment.options__3.label"
        }
      ],
      "default": "left",
      "label": "t:sections.ordonnance.settings.desktop_content_alignment.label"
    },
    {
      "type": "select",
      "id": "image_layout",
      "options": [
        {
          "value": "alternate-left",
          "label": "t:sections.ordonnance.settings.image_layout.options__1.label"
        },
        {
          "value": "alternate-right",
          "label": "t:sections.ordonnance.settings.image_layout.options__2.label"
        },
        {
          "value": "align-left",
          "label": "t:sections.ordonnance.settings.image_layout.options__3.label"
        },
        {
          "value": "align-right",
          "label": "t:sections.ordonnance.settings.image_layout.options__4.label"
        }
      ],
      "default": "alternate-left",
      "label": "t:sections.ordonnance.settings.image_layout.label",
      "info": "t:sections.ordonnance.settings.image_layout.info"
    },
    {
      "type": "color_scheme",
      "id": "section_color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "color_scheme",
      "id": "row_color_scheme",
      "label": "t:sections.ordonnance.settings.container_color_scheme.label",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.ordonnance.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "mobile_content_alignment",
      "options": [
        {
          "value": "left",
          "label": "t:sections.ordonnance.settings.mobile_content_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:sections.ordonnance.settings.mobile_content_alignment.options__2.label"
        },
        {
          "value": "right",
          "label": "t:sections.ordonnance.settings.mobile_content_alignment.options__3.label"
        }
      ],
      "default": "left",
      "label": "t:sections.ordonnance.settings.mobile_content_alignment.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "row",
      "name": "t:sections.ordonnance.blocks.row.name",
      "settings": [
        {
      "type": "product",
      "id": "product",
      "label": "t:sections.featured-product.settings.product.label"
    },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.ordonnance.blocks.row.settings.image.label"
        },
        {
          "type": "text",
          "id": "caption",
          "default": "t:sections.ordonnance.blocks.row.settings.caption.default",
          "label": "t:sections.ordonnance.blocks.row.settings.caption.label"
        },
        {
          "type": "inline_richtext",
          "id": "heading",
          "default": "t:sections.ordonnance.blocks.row.settings.heading.default",
          "label": "t:sections.ordonnance.blocks.row.settings.heading.label"
        },
        {
          "type": "richtext",
          "id": "text",
          "default": "t:sections.ordonnance.blocks.row.settings.text.default",
          "label": "t:sections.ordonnance.blocks.row.settings.text.label"
        },
        {
          "type": "text",
          "id": "button_label",
          "default": "t:sections.ordonnance.blocks.row.settings.button_label.default",
          "label": "t:sections.ordonnance.blocks.row.settings.button_label.label"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "t:sections.ordonnance.blocks.row.settings.button_link.label"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.ordonnance.presets.name",
      "blocks": [
        {
          "type": "row"
        },
        {
          "type": "row"
        },
        {
          "type": "row"
        }
      ]
    }
  ]
}
{% endschema %}
